#!/bin/bash

# Define the threshold
threshold=80

# Get the current root filesystem usage percentage
usage=$(df -h / | awk 'NR==2 {print $5}' | tr -d '%')

# Check if usage is greater than or equal to the threshold
if [ "$usage" -ge "$threshold" ]; then
    echo "Warning: Root filesystem usage is $usage%, exceeding the threshold of $threshold%."
else
    echo "Root filesystem usage is $usage%, below the threshold of $threshold%."
fi


#!/bin/bash

# Email details
recipient="recipient@example.com"
subject="Test Email with Attachment"
body="This is a test email with an attachment."

# Attachment file path
attachment="/path/to/your/attachment.txt"

# Compose the email with attachment using mutt
echo "$body" | mutt -s "$subject" -a "$attachment" -- "$recipient"



Write a shell script function to find and kill all the zombie processes.
Find the first 10 biggest files in the file system and write the output to a file.
Shell script to gracefully unmount a disk.
shell script to send email
Shell script to monitor CPU, Memory, and Disk usage and send the output to a file in table format and send an alert if either of them exceeds a certain threshold.
Shell script to find the files created and their sizes. It should accept the number of days as input. Or a from and to date format as inputs.
Write a shell script to automate the process of creating new user accounts on a Linux server and setting up their permissions and SSH access.
Write a shell script to the list of users logged in by date and write it to an output file.
Shell script to Copy files recursively to remote hosts
Shell script that displays the number of failed login attempts by IP address and location.
Shell script parses a log file and forwards a specific value with a timestamp to an output file.
Write a shell script to automate the process of rotating log files and compressing old files to save disk space.
Write a shell script to check the status of a list of URLs and send an email notification if any of them are down.
Write a shell script to automate the process of updating a list of servers with the latest security patches.




#!/bin/bash

# Remote server details
remote_user="your_username"
remote_host="your_server_address"
remote_script_path="/path/to/remote/script.sh"

# Local script to copy to the remote server
local_script_path="./local_script.sh"

# Content of the local script
echo "#!/bin/bash" > $local_script_path
echo "echo 'Hello from the remote server!'" >> $local_script_path

# Copy the local script to the remote server
scp $local_script_path ${remote_user}@${remote_host}:${remote_script_path}

# Run the script on the remote server
ssh ${remote_user}@${remote_host} "bash ${remote_script_path}"

# Clean up: remove the local script
rm $local_script_path





